// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Games         Game[]
  S3Image       S3Image[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id             String   @id @default(uuid())
  name           String?
  description    String?
  germanLanguage Boolean  @default(true)
  draft          Boolean  @default(true)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  rooms          Room[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model Room {
  id        String   @id @default(uuid())
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  image     S3Image?
  quests    Quest[]
}

model S3Image {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String   @unique
}

model Quest {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  room      Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String
  x         Float
  y         Float
  type      QuestType?
  data      Json?      @default(dbgenerated())
}

enum QuestType {
  QUEST_CRYPTO
  QUEST_CODING
  QUEST_QR_SCAN
  QUEST_STATISTICS
  QUEST_NUMBER_INPUT
  QUEST_IMAGE_COMBINATION
  MEDIA_TEXT
  MEDIA_IMAGE
  MEDIA_INSTAGRAM
  MEDIA_YOUTUBE
  MEDIA_IFRAME
}

generator yup {
  provider = "prisma-yup-generator"
}
